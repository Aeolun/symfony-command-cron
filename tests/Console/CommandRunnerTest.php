<?php
/**
 * Created by bart
 * Date: 7/22/14
 * Time: 16:35
 */

namespace Console;

use Aeolun\Symfony\Console\CronApplication;
use Aeolun\Symfony\Console\Exception\InvalidCommandException;
use Aeolun\Symfony\Console\TestCommand;
use Aeolun\Symfony\Console\WritingTestCommand;
use Symfony\Component\Console\Output\BufferedOutput;

class CommandRunnerTest extends \PHPUnit_Framework_TestCase
{
    var $testFile = null;
    /** @var CronApplication $application */
    var $application = null;

    function __construct()
    {
        parent::__construct();

        $this->testFile = dirname(__FILE__) . '/data/test.cron';
    }

    function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->application = new CronApplication($this->testFile);
    }

    private function addCommandWithName($name)
    {
        $com = new TestCommand();
        if ($name != 'test:task') {
            $com->setName($name);
        }
        $this->application->add($com);
    }

    private function addWritingCommandWithName($name)
    {
        $com = new WritingTestCommand();
        if ($name != 'test:task') {
            $com->setName($name);
        }
        $this->application->add($com);
    }

    function testContainsCommands()
    {
        $this->addCommandWithName('test:task');

        $this->assertTrue($this->application->has('test:task'));
    }

    function testFailsIfCommandsUndefined()
    {
        $this->expectException(InvalidCommandException::class);

        $this->addCommandWithName('test:command');

        $this->application->validateCommands();
    }

    function testCorrectCommandsDue()
    {
        $this->addCommandWithName('test:task');
        $this->addCommandWithName('test:bungled');
        $this->addCommandWithName('test:command');

        $commands = $this->application->getDueCommands('2014-01-01 00:05:00');

        $this->assertContains('test:task', $commands);
        $this->assertNotContains('test:command', $commands);
        $this->assertNotContains('test:bungled', $commands);

        $commands = $this->application->getDueCommands('2014-01-01 01:00:00');

        $this->assertContains('test:task', $commands);
        $this->assertContains('test:command', $commands);
        $this->assertNotContains('test:bungled', $commands);

        $commands = $this->application->getDueCommands('2014-01-01 01:03:00');

        $this->assertContains('test:task', $commands);
        $this->assertNotContains('test:command', $commands);
        $this->assertContains('test:bungled', $commands);
    }

    function testCorrectOutput()
    {
        $this->addCommandWithName('test:task');
        $this->addCommandWithName('test:bungled');
        $this->addCommandWithName('test:command');

        $output = new BufferedOutput();
        $this->application->runDueCommands('2014-01-01 00:00:00', $output);

        $result = $output->fetch();

        $this->assertContains("success!\nsuccess!", $result);
    }

    function testAsyncOutput()
    {
        $configFile = tempnam('/tmp', 'test');
        $logFile = tempnam('/tmp', 'test');

        file_put_contents($configFile, "* * * * * test:task $logFile\n* * * * * test:bungled $logFile\n");

        $this->application = new CronApplication($configFile, 'tests/Console/commands.php');

        $this->addWritingCommandWithName('test:task');
        $this->addWritingCommandWithName('test:bungled');

        $output = new BufferedOutput();

        $success = $this->application->runDueCommandsParallel('2014-01-01 00:00:00', $output);

        $this->assertTrue($success);

        $result = $output->fetch();
        var_dump($result);

        $this->assertContains("success!\nsuccess!\n", file_get_contents($logFile));
    }
}
